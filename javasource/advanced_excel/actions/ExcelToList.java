// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package advanced_excel.actions;

import advanced_excel.proxies.DocumentType;
import advanced_excel.Utils;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import com.mendix.systemwideinterfaces.core.UserAction;

/**
 * Converts an Excel object to a Record List.
 * To use this function you need an Entity that matches the Excel file content you want to import. The function matches the attributes of the Entity specified in the ListType property with column headings in the Excel file.
 * If the Entity doesn't match, you can use the AttributesMapping and AttributesToSkip properties to define the mapping between attributes of the Entity and column headings of the Excel file.
 */
public class ExcelToList extends UserAction<java.util.List<IMendixObject>>
{
	private final java.lang.String WorkbookID;
	private final java.lang.String SheetName;
	private final java.lang.String ListType;
	private final java.lang.Long TitleRowNum;
	private final java.lang.String AttributesMapping;
	private final java.lang.String AttributesToSkip;

	public ExcelToList(
		IContext context,
		java.lang.String _workbookID,
		java.lang.String _sheetName,
		java.lang.String _listType,
		java.lang.Long _titleRowNum,
		java.lang.String _attributesMapping,
		java.lang.String _attributesToSkip
	)
	{
		super(context);
		this.WorkbookID = _workbookID;
		this.SheetName = _sheetName;
		this.ListType = _listType;
		this.TitleRowNum = _titleRowNum;
		this.AttributesMapping = _attributesMapping;
		this.AttributesToSkip = _attributesToSkip;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		try
		{
			IContext context = this.getContext();
			DocumentType docType = Utils.GetDocumentType(WorkbookID);
			Workbook workbook = Utils.GetWorkBook(WorkbookID);
			if (workbook == null) {
				logger.error("ERROR in Advanced_Excel.ExcelToList:\nWorkbook object not found\nyou have to use Workbook_Create, Workbook_Open or Workbook_LoadFile to create the Workbook object");
				return null;
			} 
			
			String[] MappingArray = AttributesMapping == null ? new String[0] : AttributesMapping.split(";");
			String[] SkipArray = AttributesToSkip == null ? new String[0] : AttributesToSkip.split(";");
			
			Cell cell;
			Row row;
			String field;
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd hh:mm:ss");  
			CreationHelper helper = workbook.getCreationHelper();
			FormulaEvaluator evaluator = helper.createFormulaEvaluator();
			DataFormatter formatter = new DataFormatter();
			IMetaObject metaEntity = Core.getMetaObject(ListType);
			Sheet sheet = workbook.getSheet(this.SheetName);
			if (sheet == null) { throw new Exception("Sheet: " + this.SheetName + " not found!"); }
			
			int rowTotal = sheet.getPhysicalNumberOfRows();
			logger.info("Row Total: " + rowTotal);
			
			// Get field names
			row = sheet.getRow(TitleRowNum.intValue() - 1);
			if (row == null) { throw new Exception("Row 0 not found"); }
			int cellTotal = row.getPhysicalNumberOfCells();
			logger.info("Cell Total: " + cellTotal);
			
			List<String> Fields = new ArrayList<String>();
			for (int i = 0; i < cellTotal; i++) {
				cell = row.getCell(i);
				if (cell == null) { throw new Exception("Cell 0 - " + i + " not found"); }
				
				// Manage Attribute skipped
				field = formatter.formatCellValue(cell);
				if (Arrays.asList(SkipArray).contains(field))
				{ Fields.add(""); continue; }
				
				// Manage attribute mapping
				for (String mapping : MappingArray)
				{
					if (mapping.contains(field + "="))
					{ field = mapping.substring(field.length() + 1); break; }
				}
					
				IMetaPrimitive attribute = metaEntity.getMetaPrimitive(field);
				if (attribute == null) { throw new Exception("Attribute " + field + " not found in the entity"); }
					
				Fields.add(field);
			}

			List<IMendixObject> EntityList = new ArrayList<IMendixObject>();
			IMendixObject object;
			for (int i = TitleRowNum.intValue(); i < rowTotal; i++) {
				row = sheet.getRow(i);
				if (row == null) { continue; }
				
				object = Core.instantiate(context, ListType);
				for (int j = 0; j < Fields.size(); j++) {
					if (Fields.get(j) == "") { continue; } // Attribute skipped

					cell = row.getCell(j);
					if (cell == null) { continue; }
					
					String cellValue = "";
					if (cell.getCellType() == CellType.FORMULA) {
						switch (cell.getCachedFormulaResultType()) {
							case BOOLEAN:
								cellValue = "" + cell.getBooleanCellValue();
								break;
							case NUMERIC:
								cellValue = String.valueOf(cell.getNumericCellValue());
								break;
							case STRING:
								cellValue = "" + cell.getRichStringCellValue();
								break;
						}
					}
					else if (cell.getCellType() == CellType.NUMERIC) {
						if (DateUtil.isCellDateFormatted(cell)) {
							Date date = cell.getDateCellValue();
							cellValue = dateFormat.format(date);
						}
						else
						{ cellValue = formatter.formatCellValue(cell); }
					}
					else
					{ cellValue = formatter.formatCellValue(cell); }
					
					object.setValue​(context, Fields.get(j), cellValue);
				}
				EntityList.add(object);
			}
			
			return EntityList;
		} catch (Exception e) {
			logger.error("ERROR in Advanced_Excel.ExcelToList: " + e.getMessage() + "\n" + e.toString(), e);
			return null;
		} 
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExcelToList";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode logger = Core.getLogger("Advanced_Excel");
	// END EXTRA CODE
}
